(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{216:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-基础","aria-hidden":"true"}},[t._v("#")]),t._v(" JS 基础")]),t._v(" "),a("h2",{attrs:{id:"基本类型和对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和对象类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型和对象类型")]),t._v(" "),a("p",[t._v("基本类型(原始类型)有哪几种？null 是对象吗？基本数据类型和复杂数据类型（Object）存储有什么区别？")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"}},[t._v("原始类型"),a("OutboundLink")],1),t._v("有 7 种，分别是"),a("code",[t._v("boolean")]),t._v(", "),a("code",[t._v("null")]),t._v(", "),a("code",[t._v("undefined")]),t._v(", "),a("code",[t._v("number")]),t._v(", "),a("code",[t._v("bigint")]),t._v(", "),a("code",[t._v("string")]),t._v(", "),a("code",[t._v("symbol")])])]),t._v(" "),a("li",[a("p",[t._v("原始类型存储的都是值，是没有函数可以调用的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("'1'.toString()")]),t._v(" 这样的情况，"),a("code",[t._v("'1'")]),t._v(" 已经不是原始的"),a("code",[t._v("string")]),t._v("类型了，而是被强制转换成了 "),a("code",[t._v("String")]),t._v(" 类型，也就是对象类型")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("基本数据类型存储在栈内存")]),t._v("，存储的是值")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("复杂数据类型的值存储在堆内存，地址（指向堆中的值）存储在栈内存")]),t._v("。当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化")])])]),t._v(" "),a("p",[t._v("两个坑：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("number")]),t._v(" 类型是浮点类型的，在使用中会遇到某些 Bug，比如 "),a("code",[t._v("0.1 + 0.2 !== 0.3")]),t._v("。"),a("code",[t._v("string")]),t._v(" 类型是不可变的，无论你在 "),a("code",[t._v("string")]),t._v(" 类型上调用何种方法，都不会对值有改变")]),t._v(" "),a("li",[t._v("虽然 "),a("code",[t._v("typeof null")]),t._v(" 返回的值是 "),a("code",[t._v("object")]),t._v("，但是 "),a("code",[t._v("null")]),t._v(" 不是对象，而是基本数据类型的一种。这是一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，"),a("code",[t._v("000")]),t._v(" 开头代表是对象，然而 "),a("code",[t._v("null")]),t._v(" 表示为全零，所以将它错误的判断为 "),a("code",[t._v("object")])])]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")])]),t._v(" "),a("p",[t._v("JavaScript 中"),a("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("表示最大安全数字,计算结果是 9007199254740991，即在这个数范围内不会出现精度丢失（小数除外）。")]),t._v(" "),a("p",[t._v("但是一旦超过这个范围，js 就会出现计算不准确的情况，这在大数计算的时候不得不依靠一些第三方库进行解决，因此官方提出了 BigInt 来解决此问题。")]),t._v(" "),a("h2",{attrs:{id:"typeof-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-instanceof","aria-hidden":"true"}},[t._v("#")]),t._v(" typeof instanceof")]),t._v(" "),a("p",[t._v("typeof 能否正确判断类型? instanceof 呢？ instanceof 的实现原理是什么？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v(" 能正确判断基本数据类型，"),a("strong",[t._v("除了 null")]),t._v("（null 输出 object，这是一个 bug）")]),t._v(" "),a("li",[t._v("对于对象来说，")])]),t._v(" "),a("h2",{attrs:{id:"for-of-for-in-foreach-map-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of-for-in-foreach-map-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" for...of , for...in, forEach, map 的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("for...of")]),t._v(" 有 iterator 接口，就可以用 for of 遍历他的成员（属性值）。")])]),t._v(" "),a("p",[t._v("https://juejin.im/post/5cab0c45f265da2513734390#heading-0")]),t._v(" "),a("h2",{attrs:{id:"和-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" == 和 === 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("=== 不需要进行类型转换，只有类型相同并且值相等时，才返回 true")]),t._v(" "),a("li",[t._v("== 如果两者类型不同，首先需要进行类型转换。具体流程如下")])]),t._v(" "),a("ol",[a("li",[t._v("首先判断两者类型是否相同，如果相同，判断值是否相等")]),t._v(" "),a("li",[t._v("如果类型不同，进行类型转换")]),t._v(" "),a("li",[t._v("判断比较的是否是 "),a("code",[t._v("null")]),t._v(" 或者是 "),a("code",[t._v("undefined")]),t._v(", 如果是, 返回 "),a("code",[t._v("true")])])]),t._v(" "),a("h2",{attrs:{id:"如何进行尾递归优化？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何进行尾递归优化？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何进行尾递归优化？")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重点在尾部调用返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 120")]),t._v("\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" total\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重点在尾部调用返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 120")]),t._v("\n")])])]),a("h2",{attrs:{id:"箭头函数相比普通函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数相比普通函数的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 箭头函数相比普通函数的区别")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5c979300e51d456f49110bf0#heading-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("第一，箭头函数更简洁；第二，没有自己的 this，他的 this 指向在定义时所处的外层上下文，并且永远不会变，即使是 call,apply,bind 也是无效的，但不会报错；第三，没有自己的 auguments 对象，arguments 指向的也是外层上下文的 auguments，如果是全局，则为 undefined；第四，没有原型对象 "),a("code",[t._v("prototype")]),t._v("；第五，不能用作 Generator 函数。")])]),t._v(" "),a("p",[a("strong",[t._v("1.箭头函数更简洁清晰")])]),t._v(" "),a("p",[a("strong",[t._v("2.箭头函数不会创建自己的"),a("code",[t._v("this")]),t._v("，所以它没有自己的"),a("code",[t._v("this")]),t._v("，它只会从自己的作用域链的上一层继承"),a("code",[t._v("this")])])]),t._v(" "),a("blockquote",[a("p",[t._v("箭头函数没有自己的 this，它会捕获自己在**定义时（注意，是定义时，不是调用时）**所处的外层执行环境的 this，并继承这个 this 值。所以，"),a("strong",[t._v("箭头函数中 this 的指向在它被定义的时候就已经确定了，之后永远不会改变")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Global'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Obj'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Global'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Obj'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Obj'")]),t._v("\n")])])]),a("p",[a("strong",[t._v("3.箭头函数继承而来的 this 指向永远不变")])]),t._v(" "),a("p",[t._v("上面的例子，就完全可以说明箭头函数继承而来的"),a("code",[t._v("this")]),t._v("指向永远不变。对象"),a("code",[t._v("obj")]),t._v("的方法"),a("code",[t._v("b")]),t._v("是使用箭头函数定义的，这个函数中的"),a("code",[t._v("this")]),t._v("就"),a("strong",[t._v("永远指向")]),t._v("它定义时所处的全局执行环境中的"),a("code",[t._v("this")]),t._v("，即便这个函数是作为对象"),a("code",[t._v("obj")]),t._v("的方法调用，"),a("code",[t._v("this")]),t._v("依旧指向"),a("code",[t._v("Window")]),t._v("对象。")]),t._v(" "),a("p",[a("strong",[t._v("4.call()/apply()/bind() 无法改变箭头函数中 this 的指向")])]),t._v(" "),a("p",[a("code",[t._v(".call()")]),t._v("/"),a("code",[t._v(".apply()")]),t._v("/"),a("code",[t._v(".bind()")]),t._v("方法可以用来动态修改函数执行时"),a("code",[t._v("this")]),t._v("的指向，但由于箭头函数的"),a("code",[t._v("this")]),t._v("定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数"),a("code",[t._v("this")]),t._v("的指向，虽然这么做代码不会报错。")]),t._v(" "),a("p",[a("strong",[t._v("5.箭头函数不能作为构造函数使用")])]),t._v(" "),a("p",[t._v("构造函数 new 做了什么？")]),t._v(" "),a("p",[t._v("① JS 内部首先会先生成一个对象； ② 再把函数中的 this 指向该对象； ③ 然后执行构造函数中的语句； ④ 最终返回该对象实例。")]),t._v(" "),a("p",[t._v("但还是由于"),a("strong",[t._v("箭头函数没有自己的 this")]),t._v(" 的特性，所以无法作为构造函数来使用。")]),t._v(" "),a("p",[a("strong",[t._v("6.箭头函数没有自己的 arguments")])]),t._v(" "),a("p",[t._v("箭头函数没有自己的"),a("code",[t._v("arguments")]),t._v("对象。在箭头函数中访问"),a("code",[t._v("arguments")]),t._v("实际上获得的是外层局部（函数）执行环境中的值。当然如果外层 OR 全局没有 arguments 的话，就报错。")]),t._v(" "),a("details",[a("summary",[t._v("折叠代码块")]),t._v(" "),a("pre",[a("code",[t._v(" \n// 例子一\nlet fun = (val) => {\n    console.log(val);   // 111\n    // 下面一行会报错\n    // Uncaught ReferenceError: arguments is not defined\n    // 因为外层全局环境没有arguments对象\n    console.log(arguments); \n};\nfun(111);\n// 例子二\nfunction outer(val1, val2) {\n    let argOut = arguments;\n    console.log(argOut);    // ①\n    let fun = () => {\n        let argIn = arguments;\n        console.log(argIn);     // ②\n        console.log(argOut === argIn);  // ③\n    };\n    fun();\n}\nouter(111, 222);\n  ")])])]),t._v(" "),a("p",[a("strong",[t._v("7、箭头函数没有原型 prototype")])]),t._v(" "),a("p",[a("strong",[t._v("8、箭头函数不能用作 Generator 函数，不能使用 yeild 关键字")])]),t._v(" "),a("h2",{attrs:{id:"es6-module-和-commonjs-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-和-commonjs-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 Module 和 Commonjs 的区别")]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"es6-module-的特点-对比-commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-的特点-对比-commonjs","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 Module 的特点(对比 CommonJS)")])]),t._v(" "),a("li",[a("p",[t._v("CommonJS 模块是运行时加载，ES6 Module 是编译时输出接口；")])]),t._v(" "),a("li",[a("p",[t._v("CommonJS 加载的是整个模块，将所有的接口全部加载进来，ES6 Module 可以单独加载其中的某个接口；")])]),t._v(" "),a("li",[a("p",[t._v("CommonJS 输出是值的拷贝，ES6 Module 输出的是值的引用，被输出模块的内部的改变会影响引用的改变；")])]),t._v(" "),a("li",[a("p",[t._v("CommonJS "),a("code",[t._v("this")]),t._v("指向当前模块，ES6 Module 默认开启严格模式 "),a("code",[t._v("this")]),t._v("指向"),a("code",[t._v("undefined")]),t._v(";")])])]),t._v(" "),a("h2",{attrs:{id:"什么是函数式编程？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是函数式编程？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是函数式编程？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("纯函数")]),t._v(" "),a("ul",[a("li",[t._v("返回一个新的值，没有副作用，不会偷偷修改其他值")]),t._v(" "),a("li",[t._v("重点：不可变值")]),t._v(" "),a("li",[t._v("输入和返回的值的类型相同，接口相同")])])]),t._v(" "),a("li",[a("p",[t._v("curry 化")])])])])},[],!1,null,null,null);s.default=e.exports}}]);