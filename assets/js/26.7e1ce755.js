(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{226:function(e,s,t){"use strict";t.r(s);var r=t(4),a=Object(r.a)({},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"有关-session-的那些事儿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有关-session-的那些事儿","aria-hidden":"true"}},[e._v("#")]),e._v(" 有关 Session 的那些事儿")]),e._v(" "),t("p",[e._v("https://blog.by24.cn/archives/about-session.html")]),e._v(" "),t("p",[e._v("Web 开发中，"),t("strong",[e._v("Session")]),e._v(" 是经常用到的概念，但是在日常交流中，似乎又经常引起误解。")]),e._v(" "),t("p",[e._v("在我看来，引发误解的原因主要有两个：")]),e._v(" "),t("ol",[t("li",[e._v("大量使用简称，导致混淆了 数据 与 索引")]),e._v(" "),t("li",[e._v("不同 语言/框架 对 Session 做了不同形式的封装，导致特征不同")])]),e._v(" "),t("p",[e._v("下面，我就尝试着捋一下整个问题，看看能不能尽量消除这些误会。")]),e._v(" "),t("blockquote",[t("p",[t("em",[e._v("注：其它通讯领域也有使用 Session 这个词汇，本文仅探讨 Web 开发中的 Session 使用。")])])]),e._v(" "),t("h2",{attrs:{id:"tl-dr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tl-dr","aria-hidden":"true"}},[e._v("#")]),e._v(" TL;DR")]),e._v(" "),t("p",[e._v("本文确实冗长无比，此处列出简要观点方便『太长不看』（Too Long; Didn't Read.）的读者。")]),e._v(" "),t("ul",[t("li",[e._v("除了常见的 Server Side Session，应当注意还有 Client Side Session 的存在")]),e._v(" "),t("li",[e._v("Session 是虚拟概念，应当注意区分 Session-ID 和 Session-Data")]),e._v(" "),t("li",[e._v("Session 的具体实现，与 Cookies 没有绑定关系")]),e._v(" "),t("li",[e._v("JWT 和 Session 压根不在一个维度，不应该放在一起讨论")])]),e._v(" "),t("h2",{attrs:{id:"session-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-是什么","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 是什么")]),e._v(" "),t("h3",{attrs:{id:"名词约定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#名词约定","aria-hidden":"true"}},[e._v("#")]),e._v(" 名词约定")]),e._v(" "),t("p",[e._v("由于大家使用的『简称』含义往往差别很大，在此我们先 "),t("strong",[e._v("约定")]),e._v(" 一些称呼。")]),e._v(" "),t("p",[e._v("这些称呼可能和你惯用的不太一样，但统一定义是高效讨论的重要基础，还请不要抗拒。")]),e._v(" "),t("h4",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[e._v("#")]),e._v(" Session")]),e._v(" "),t("p",[e._v("Session 经常被翻译为 『会话』，其实还是很贴切的，它代表了『一次』相互沟通，这次会话中，可能包括了多次通信。")]),e._v(" "),t("p",[e._v("需要注意的是：此处 Session 是一个整体性的 "),t("strong",[e._v("虚拟概念")]),e._v(" ，不代指任何实体或数据。")]),e._v(" "),t("h4",{attrs:{id:"session-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Session-Data")]),e._v(" "),t("p",[e._v("看到 Data 后缀就知道，这个词代表了一次 Session 中，暂存或使用 的一些数据。")]),e._v(" "),t("p",[e._v("具体是什么数据取决于业务实现，例如可能存储了一些用户的 ID 信息或短效配置等。")]),e._v(" "),t("p",[e._v("需要注意的是，此处指的是数据的『实体』，而不是『索引』。")]),e._v(" "),t("h4",{attrs:{id:"session-id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-id","aria-hidden":"true"}},[e._v("#")]),e._v(" Session-ID")]),e._v(" "),t("p",[e._v("上面说到的数据实体 Session-Data ，未必会直接放在程序内部，而是可能存储在某一个具体的位置（后文会详细讨论）。")]),e._v(" "),t("p",[e._v("在大部分 Server Side Session 实现中（即 Session-Data 存储在服务端时），为了方便取用，就需要记录一个『索引』，用来找到具体的 Session-Data ，我们将这个『索引』称为 Session-ID 。")]),e._v(" "),t("p",[e._v("需要注意的是：在某些实现中，可能并没有 Session-ID 的概念（例如 Client Side Session）。")]),e._v(" "),t("h3",{attrs:{id:"存储的差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储的差异","aria-hidden":"true"}},[e._v("#")]),e._v(" 存储的差异")]),e._v(" "),t("p",[e._v("正如我前面所强调的，在不同的实现中，Session-Data 可能存储在不同的位置：可能在客户端，也可能在服务端。")]),e._v(" "),t("h4",{attrs:{id:"server-side-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server-side-session","aria-hidden":"true"}},[e._v("#")]),e._v(" Server Side Session")]),e._v(" "),t("p",[e._v("在大部分实现中，并不会直接传输 Session-Data ，而是传输它的索引：Session-ID ，服务端程序收到 Session-ID 后，从存储着 Session-Data 的地方取出具体的 Session-Data 来使用。")]),e._v(" "),t("p",[e._v("在这种模式下，更容易被我们接触到的，其实是存储在 Cookies 里的 Session-ID ，而许多人存在的一个误区，便是将 Session-ID 直接等同于 Session 本身，无视了 Session-Data 的存在，这其实是不正确的。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img.by24.cn/picgo/20200324184048.png",alt:"img"}})]),e._v(" "),t("p",[e._v("上图表示了这种模式的大致运行方式，绿色的 Session 是一个老用户会话， Alice 在访问时发送了自己持有的 Session-ID "),t("code",[e._v("AA01")]),e._v(" 来标记当前会话，服务器程序根据相应的 Session-id 查询出了相应的 Session Data ，并在程序中应用。")]),e._v(" "),t("p",[e._v("对于新用户，因为自己没有存储 Session-id，只好不发送，服务器为了标记本次会话，生成了新的 Session-ID "),t("code",[e._v("NN02")]),e._v(" 并返回给客户端，这样就开启了一个新的会话，图中用红色 Session 表示。")]),e._v(" "),t("h4",{attrs:{id:"client-side-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-side-session","aria-hidden":"true"}},[e._v("#")]),e._v(" Client Side Session")]),e._v(" "),t("p",[e._v("除了上面提到的常见模式，其实还存在一种实现被许多人忽视，服务端并不存储 Session-Data，而是直接将 Session-Data 存储在客户端（浏览器）的 Cookies 里。")]),e._v(" "),t("p",[e._v("在这种情况下，你甚至找不到 Session-ID 的存在，许多人也会因此而搞不清 Session 究竟存储在哪里。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img.by24.cn/picgo/20200324190605.png",alt:"img"}})]),e._v(" "),t("p",[e._v("上图表示了这种模式的大致运行方式，与上面那种方式不同的地方在于，客户端直接告诉服务端，我自己是 Alice ，我的基本信息是 xxx ，于是服务端使用这些数据返回了相应的页面。")]),e._v(" "),t("p",[e._v("对于新用户，本地一丁点儿信息都没有，于是服务端返回了一个空的 Session-Data 用来初始化，在后续的通信中，这个 Session-Data 会被继续填充上有意义的数据。")]),e._v(" "),t("p",[e._v("很显然，这里存在着巨大的安全问题：我直接修改存储在本地的 Session-Data，声称我自己是管理员怎么办？")]),e._v(" "),t("p",[e._v("为此，Client side session 需要加入"),t("strong",[e._v("加密机制")]),e._v("或"),t("strong",[e._v("签名机制")]),e._v("来进行校验，以确保所有的 Session-Data 都是由服务端生成的，具体会在下文讨论。")]),e._v(" "),t("h3",{attrs:{id:"和-cookies-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-cookies-的关系","aria-hidden":"true"}},[e._v("#")]),e._v(" 和 Cookies 的关系")]),e._v(" "),t("p",[e._v("提到 Session 就不能不提 Cookies，毕竟很多人会条件反射的把这二者弄混（苦笑脸）。")]),e._v(" "),t("p",[e._v("Cookies 自身就有非常多的玩儿法，抛开那些权限相关的内容，此处我们先只它最基础的几个特性：")]),e._v(" "),t("ul",[t("li",[e._v("在客户端（浏览器）内存储一些数据（而不是在服务端）")]),e._v(" "),t("li",[e._v("这些信息，可以由服务端设置，也可以由客户端设置")]),e._v(" "),t("li",[e._v("当用户发起 HTTP 请求时，匹配的 Cookies 会嵌入请求头部（Header）一起发送")])]),e._v(" "),t("p",[e._v("正是这些特征，让 Cookies 成为存储 Session-Data / Session-ID 的绝佳场所，在几乎所有的常见实现中，均默认使用 Cookies 来存储 Session 相关信息。")]),e._v(" "),t("p",[e._v("但是需要注意，Session-Data / Session-ID 选择 Cookie 作为容器只是因为『方便』，但这"),t("strong",[e._v("并不是必然情况")]),e._v("：")]),e._v(" "),t("blockquote",[t("p",[e._v("我们完全可以实现一个 Web 框架，它使用 LocalStorage 来存储 Session-Data / Session-ID ，在发起 XHR 请求时，主动将其加进 Header 内（甚至 URL 内），服务端则从相应位置读取信息完成业务逻辑，在这套框架体系内这是完全没有问题的。")])]),e._v(" "),t("p",[e._v("实际上，许多框架都支持 Session with out Cookies 的实现，虽然存在各种各样的小问题或限制，但是确实可用。")]),e._v(" "),t("p",[e._v("因此，需要再次强调：对于 Session 机制来说，Session-Data / Session-ID 才是本体，Cookies 只是一个"),t("strong",[e._v("存储容器")]),e._v("，这二者"),t("strong",[e._v("没有捆绑关系")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"session-机制的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-机制的实现","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 机制的实现")]),e._v(" "),t("p",[e._v("对于 Session 机制，之所以总是产生种种误解， 和各大 语言 / 框架 的实现有着很大的关联，由于大部分人都更熟悉自己常用的框架，导致很容易被当前框架的思路带进去。")]),e._v(" "),t("p",[e._v("那么接下来，就看一下各种常用 语言 / 框架 在 Session 机制上的实现与差异。")]),e._v(" "),t("p",[t("em",[e._v("注：以下只是各个 语言 / 框架 默认支持的实现，实际中我们完全可以自定义任何形式的实现。")])]),e._v(" "),t("h3",{attrs:{id:"php"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php","aria-hidden":"true"}},[e._v("#")]),e._v(" PHP")]),e._v(" "),t("h4",{attrs:{id:"原生-php"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原生-php","aria-hidden":"true"}},[e._v("#")]),e._v(" 原生 PHP")]),e._v(" "),t("p",[e._v("PHP 不愧是为 Web 而生的语言，在语言层面就提供了 Session 机制的"),t("a",{attrs:{href:"https://www.php.net/manual/zh/intro.session.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("支持"),t("OutboundLink")],1),e._v("，按默认配置就可以使用 "),t("a",{attrs:{href:"https://www.php.net/manual/zh/reserved.variables.session.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("$_SESSION "),t("OutboundLink")],1),e._v("这个超全局变量。")]),e._v(" "),t("p",[e._v("原生 PHP 默认使用的 Session-Data 存储方式为 Server Side Session ，使用 Session-ID 进行索引，Session-ID 默认存储在 Cookies 的 "),t("code",[e._v("PHPSESSID")]),e._v(" 字段。")]),e._v(" "),t("p",[e._v("Session-Data 默认以文件形式存储在 "),t("code",[e._v("session_save_path")]),e._v(" 所配置的路径中， "),t("code",[e._v("PHPSESSID")]),e._v("字段的内容就是文件名，文件内容就是序列化后的 Session-Data 数据。")]),e._v(" "),t("p",[e._v("通过配置 "),t("code",[e._v("session.save_handler")]),e._v(" 字段，我们可以将存储方式切换为 "),t("code",[e._v("redis")]),e._v(" 或者 "),t("code",[e._v("memcache")]),e._v(" 。")]),e._v(" "),t("p",[e._v("以 "),t("code",[e._v("redis")]),e._v(" 为例，Session-Data 会被存储在"),t("code",[e._v("PHPREDIS_SESSION:PHPSESSID")]),e._v(" 中，"),t("code",[e._v("PHPREDIS_SESSION:")]),e._v("为默认的统一前缀。")]),e._v(" "),t("p",[e._v("除此之外，还有一些其它的配置可以参考"),t("a",{attrs:{href:"https://www.php.net/manual/zh/session.configuration.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("，原生 PHP 也支持"),t("a",{attrs:{href:"https://www.php.net/manual/zh/refs.basic.session.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("其它的相关扩展"),t("OutboundLink")],1),e._v("，不再一一赘述。")]),e._v(" "),t("h4",{attrs:{id:"laravel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#laravel","aria-hidden":"true"}},[e._v("#")]),e._v(" Laravel")]),e._v(" "),t("p",[e._v("Laravel 果然也很强，不但默认提供了常规的 Server Side Session ，也支持"),t("a",{attrs:{href:"https://laravel.com/docs/master/session#configuration",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置为"),t("OutboundLink")],1),e._v(" Client Side Session 形式。")]),e._v(" "),t("p",[e._v("通过配置 "),t("a",{attrs:{href:"https://github.com/laravel/laravel/blob/master/config/session.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("config/session.php"),t("OutboundLink")],1),e._v(" 的 "),t("code",[e._v("driver")]),e._v(" 字段，可以切换 "),t("code",[e._v("file")]),e._v(" 、"),t("code",[e._v("cookie")]),e._v(" 、"),t("code",[e._v("database")]),e._v(" 、"),t("code",[e._v("memcached")]),e._v(" 、"),t("code",[e._v("redis")]),e._v(" 、"),t("code",[e._v("array")]),e._v(" 这 6 种不同的存储方式。")]),e._v(" "),t("p",[e._v("这里面， "),t("code",[e._v("file")]),e._v(" 、"),t("code",[e._v("memcached")]),e._v(" 、"),t("code",[e._v("redis")]),e._v(" 都是比较常见的存储方式，就不再赘述。")]),e._v(" "),t("p",[t("code",[e._v("database")]),e._v(" 可以将 Session-Data 存储在你定义的数据库内，但是你需要先建好一张表，里面配置好要存储的字段。")]),e._v(" "),t("p",[t("code",[e._v("array")]),e._v(" 是一种比较奇怪的方式，只是用在开发阶段，它并没有任何持久化功能，随着 PHP 脚本的运行结束而消失。")]),e._v(" "),t("p",[t("code",[e._v("cookie")]),e._v(" 则是比较少见的 "),t("strong",[e._v("Client Side Session")]),e._v(" 了，Laravel 使用 "),t("a",{attrs:{href:"https://github.com/laravel/framework/blob/master/src/Illuminate/Session/EncryptedStore.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("EncryptedStore.php"),t("OutboundLink")],1),e._v(" 对 Session-Data 进行 『加密』后存储于客户端浏览器的 Cookies 中。")]),e._v(" "),t("p",[e._v("这里需要注意，Laravel 在实现 "),t("strong",[e._v("Client Side Session")]),e._v(" 的时候使用的是 『加密』方式来保障信息安全。")]),e._v(" "),t("h4",{attrs:{id:"codeigniter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#codeigniter","aria-hidden":"true"}},[e._v("#")]),e._v(" CodeIgniter")]),e._v(" "),t("p",[e._v("接下来看看老牌框架 CI 怎么样，翻看 "),t("a",{attrs:{href:"https://codeigniter.com/user_guide/libraries/sessions.html#session-drivers",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置文档"),t("OutboundLink")],1),e._v(" 可以看到，CI4 默认支持 "),t("code",[e._v("file")]),e._v(" 、"),t("code",[e._v("database")]),e._v(" 、"),t("code",[e._v("memcached")]),e._v(" 、"),t("code",[e._v("redis")]),e._v(" 这几种 Server Side Session，看起来似乎平平无奇，都是常见套路。")]),e._v(" "),t("p",[e._v("但是文档上有一行备注：")]),e._v(" "),t("blockquote",[t("p",[e._v("In previous CodeIgniter versions, a different, “cookie driver” was the only option and we have received negative feedback on not providing that option. While we do listen to feedback from the community, we want to warn you that it was dropped because it is "),t("strong",[e._v("unsafe")]),e._v(" and we advise you NOT to try to replicate it via a custom driver.")])]),e._v(" "),t("p",[e._v("这就很有意思了，看起来 CI 框架以前也支持 "),t("strong",[e._v("Client Side Session")]),e._v(" 嘛？翻出了 "),t("a",{attrs:{href:"https://codeigniter.com/userguide2/libraries/sessions.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CI2 的文档"),t("OutboundLink")],1),e._v(" ，果然里面默认使用 Cookies 存储 Session-Data ，也提供了加密的选项。")]),e._v(" "),t("p",[e._v("那为什么 CI2 当时会因为这个被锤呢？我找到一篇相关的文章："),t("a",{attrs:{href:"https://www.websec.ca/publication/Blog/insecure-session-data-CodeIgniter",target:"_blank",rel:"noopener noreferrer"}},[e._v("(IN)secure session data in CodeIgniter - Websec"),t("OutboundLink")],1),e._v(" ，文章中的观点来看：")]),e._v(" "),t("ol",[t("li",[e._v("虽然提供了对 Cookies 进行加密的选项，但默认配置是关闭的，这就导致了 Session-Data 会以明文展示，可能会泄漏信息。")]),e._v(" "),t("li",[e._v("虽然 CI2 在加密的基础上，还对明文 Session-Data 进行了签名，但是在用户配置了弱密钥的情况下，签名密钥可能会被暴力破解，导致 Session-Data 被篡改。")])]),e._v(" "),t("p",[e._v("其实这两个问题都更应该归咎于用户的配置不当，但是毕竟和框架的默认配置有关，被锤也就在情理之中了。")]),e._v(" "),t("p",[e._v("可能也是因为这件事，才导致了 CI 现在只提供 Server Side Session 实现吧。")]),e._v(" "),t("h4",{attrs:{id:"其它-php-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它-php-框架","aria-hidden":"true"}},[e._v("#")]),e._v(" 其它 PHP 框架")]),e._v(" "),t("p",[e._v("翻看了一下 "),t("a",{attrs:{href:"https://symfony.com/doc/master/session.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Symfony"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://www.yiiframework.com/doc/guide/2.0/zh-cn/runtime-sessions-cookies",target:"_blank",rel:"noopener noreferrer"}},[e._v("Yii"),t("OutboundLink")],1),e._v(" 、"),t("a",{attrs:{href:"https://book.cakephp.org/4/en/development/sessions.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CakePHP"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://www.kancloud.cn/manual/thinkphp6_0/1037635",target:"_blank",rel:"noopener noreferrer"}},[e._v("ThinkPHP"),t("OutboundLink")],1),e._v(" 等热门框架关于 Session 的文档，都使用了比较常规的 Server Side Session 方式，也都支持将 Session-Data 存储在文件、数据库、内存数据库等，在此就不一一介绍了，有需要的可以点链接查看相应文档。")]),e._v(" "),t("h3",{attrs:{id:"java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java","aria-hidden":"true"}},[e._v("#")]),e._v(" Java")]),e._v(" "),t("h4",{attrs:{id:"tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat")]),e._v(" "),t("p",[e._v("Tomcat 也是 Server Side Session 一派，默认在 Cookies 中使用 "),t("code",[e._v("JSESSIONID")]),e._v(" 字段存储 Session-ID，Session-Data 默认存储在 "),t("strong",[e._v("内存中")]),e._v(" ，翻阅 org.apache.catalina.session.ManagerBase 的"),t("a",{attrs:{href:"http://www.docjar.com/html/api/org/apache/catalina/session/ManagerBase.java.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),t("OutboundLink")],1),e._v("，可以看到它使用了一个 ConcurrentHashMap 结构来存储所有的 Session-Data 实例。")]),e._v(" "),t("p",[e._v("Tomcat 默认使用 "),t("a",{attrs:{href:"http://www.docjar.com/docs/api/org/apache/catalina/session/StandardManager.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("StandardManager"),t("OutboundLink")],1),e._v(" 来管理 Session-Data，当容器退出时，"),t("strong",[e._v("在退出时")]),e._v("将所有的数据进行持久化；你也可以选择使用 "),t("a",{attrs:{href:"http://www.docjar.com/docs/api/org/apache/catalina/session/PersistentManager.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("PersistentManager"),t("OutboundLink")],1),e._v(" 来管理，它可以更加灵活的执行持久化（但是 Session-Data 还是会存储在你的内存里）。")]),e._v(" "),t("h4",{attrs:{id:"jetty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jetty","aria-hidden":"true"}},[e._v("#")]),e._v(" Jetty")]),e._v(" "),t("p",[e._v("Jetty 也比较中规中矩，参照"),t("a",{attrs:{href:"https://www.eclipse.org/jetty/documentation/current/session-management.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),t("OutboundLink")],1),e._v("来看，支持将 Session-Data 配置为存储在 内存、文件、JDBC 等位置。")]),e._v(" "),t("p",[e._v("比较不同的是，Jetty 支持为 Session-Data 配置 "),t("a",{attrs:{href:"https://www.eclipse.org/jetty/documentation/current/session-configuration-sessioncache.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("L1"),t("OutboundLink")],1),e._v("、 "),t("a",{attrs:{href:"https://www.eclipse.org/jetty/documentation/current/session-configuration-memcachedsessiondatastore.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("L2"),t("OutboundLink")],1),e._v(" 两级缓存，在对性能有需求的场景下还是挺友好。")]),e._v(" "),t("h4",{attrs:{id:"spring-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-session","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring Session")]),e._v(" "),t("p",[e._v("果然是家大业大的框架，"),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Session"),t("OutboundLink")],1),e._v(" 自己就是个完整的组件了，毫无意外的支持把 Session-Data 储存在 "),t("code",[e._v("redis")]),e._v(" 、"),t("code",[e._v("mongodb")]),e._v(" ，"),t("code",[e._v("jdbc")]),e._v(" 等地方，方便扩展。")]),e._v(" "),t("p",[e._v("不知如此，它还有一些特有的特性：")]),e._v(" "),t("ul",[t("li",[e._v("支持将 Session-ID 配置在 Request Header 的 "),t("code",[e._v("X-Auth-Token")]),e._v(" 字段，更好的兼容 "),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/#httpsession-rest",target:"_blank",rel:"noopener noreferrer"}},[e._v("RESTful API"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("可以"),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/#websocket",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 WebSockt 中使用 "),t("OutboundLink")],1),e._v("，且可以和 HTTP 侧的 Session 机制相互配合使用")]),e._v(" "),t("li",[e._v("可以"),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/#spring-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("和 Spring Security 配合"),t("OutboundLink")],1),e._v("，实现更多权限管控相关功能")])]),e._v(" "),t("p",[e._v("在旧一些的版本中，Spring Session 还支持 "),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/1.3.3.RELEASE/reference/html5/#httpsession-multi",target:"_blank",rel:"noopener noreferrer"}},[e._v("在一个浏览器会话中，维护多个 Session"),t("OutboundLink")],1),e._v(" ，不过在新版本中，这个特性"),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/#dropped-support",target:"_blank",rel:"noopener noreferrer"}},[e._v("被删除了"),t("OutboundLink")],1),e._v("，也许以后才会加回来。")]),e._v(" "),t("p",[e._v("这个巨无霸框架其实还支持其它一大堆特性，这里就不太多介绍了。")]),e._v(" "),t("h3",{attrs:{id:"python"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[e._v("#")]),e._v(" Python")]),e._v(" "),t("h4",{attrs:{id:"django"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#django","aria-hidden":"true"}},[e._v("#")]),e._v(" Django")]),e._v(" "),t("p",[e._v("作为一个功能完善的重量级框架，Django 默认直接将 Session-Data 存储在了数据库，当然，你也可以"),t("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/topics/http/sessions/#configuring-the-session-engine",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置"),t("OutboundLink")],1),e._v("为其它的存储方式，不再赘述。")]),e._v(" "),t("p",[e._v("这些存储方式中，"),t("strong",[e._v("Client Side Session")]),e._v(" 的代表"),t("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/topics/http/sessions/#using-cookie-based-sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v(" Cookies "),t("OutboundLink")],1),e._v("再次出现，Session-Data 在序列化并『签名』后，存储在客户端 Cookies 中。")]),e._v(" "),t("p",[e._v("这里需要注意，此处是『签名』而不是『加密』，也就是说，客户端虽然不能篡改 Session-Data，但是可以自己反序列化后查看内容。")]),e._v(" "),t("p",[e._v("另外，Django 的 Session-data 还支持使用 "),t("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/topics/http/sessions/#django.contrib.sessions.serializers.PickleSerializer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pickle"),t("OutboundLink")],1),e._v(" 进行序列化，对于某些场景会非常有用（同时也带来了一些"),t("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/topics/http/sessions/#using-cookie-based-sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("潜在风险"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("h4",{attrs:{id:"flask"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flask","aria-hidden":"true"}},[e._v("#")]),e._v(" Flask")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://flask.palletsprojects.com/en/1.1.x/api/#sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("翻下文档"),t("OutboundLink")],1),e._v("，专注于轻量的框架 Flask ，毫无疑问的选择了实现起来最简单的方案：直接用 "),t("strong",[e._v("Client Side Session")]),e._v(" 就行了。")]),e._v(" "),t("p",[e._v("把 Session-Data 序列化并『签名』后，存储在客户端 Cookies 中就搞掂啦。这里同样需要注意，是『签名』而不是『加密』。")]),e._v(" "),t("p",[e._v("不过这毕竟是个 Python 框架，人家包多啊，使用 "),t("a",{attrs:{href:"https://pythonhosted.org/Flask-Session/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flask-Session"),t("OutboundLink")],1),e._v(" 就可以获得更多功能，支持将 Session-Data 存储在 Cookies、文件、Redis、数据库等各种地方。")]),e._v(" "),t("h4",{attrs:{id:"tornado"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tornado","aria-hidden":"true"}},[e._v("#")]),e._v(" Tornado")]),e._v(" "),t("p",[e._v("这个已经接近凉凉的框架表示：不好意思，我们没有现成的 Session 模块，想要用？那你自己写去~")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://security.stackexchange.com/questions/168807/why-doesnt-tornado-have-session",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why doesn't Tornado have session - Stack Exchange"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"node-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js")]),e._v(" "),t("h4",{attrs:{id:"express"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express","aria-hidden":"true"}},[e._v("#")]),e._v(" Express")]),e._v(" "),t("p",[e._v("Express 自身是最小化实现，Session 相关的功能由各种中间件来实现，此处主要提两个中间件。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/expressjs/session",target:"_blank",rel:"noopener noreferrer"}},[e._v("express-session"),t("OutboundLink")],1),e._v(" 是典型的 Server Side Session 实现，依靠强大的包数量支持"),t("a",{attrs:{href:"https://github.com/expressjs/session#compatible-session-stores",target:"_blank",rel:"noopener noreferrer"}},[e._v("很多种存储后端"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("比较有意思的是，虽然是 Server Side Session 实现，express-session 依然不放心，给 Cookies 里的 Session-ID 加了一层『签名』做"),t("a",{attrs:{href:"https://github.com/expressjs/session#secret",target:"_blank",rel:"noopener noreferrer"}},[e._v("校验"),t("OutboundLink")],1),e._v("，可以说非常心细了。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/expressjs/cookie-session",target:"_blank",rel:"noopener noreferrer"}},[e._v("cookie-session"),t("OutboundLink")],1),e._v(" 相对就比较普通，就是一个常规的 Client Side Session 实现， Session-Data 在序列化并『签名』后，存储在客户端的 Cookies 内。")]),e._v(" "),t("h4",{attrs:{id:"koa-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#koa-js","aria-hidden":"true"}},[e._v("#")]),e._v(" Koa.js")]),e._v(" "),t("p",[e._v("包多就是好啊，koa 也有"),t("a",{attrs:{href:"https://github.com/koajs/koa/wiki#sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("一大堆"),t("OutboundLink")],1),e._v(" Session 相关的中间件，在此就不一一介绍了。")]),e._v(" "),t("h3",{attrs:{id:"go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go","aria-hidden":"true"}},[e._v("#")]),e._v(" Go")]),e._v(" "),t("h4",{attrs:{id:"gin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin","aria-hidden":"true"}},[e._v("#")]),e._v(" Gin")]),e._v(" "),t("p",[e._v("翻了下 Gin 比较常用的中间件是 "),t("a",{attrs:{href:"https://github.com/gin-contrib/sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("gin-contrib/sessions"),t("OutboundLink")],1),e._v(" ，同时支持 Server / Client Side Session ，也支持多种储存后端。")]),e._v(" "),t("p",[e._v("这个中间件默认支持在一个浏览器会话中，维护"),t("a",{attrs:{href:"https://github.com/gin-contrib/sessions#multiple-sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("多个 Session"),t("OutboundLink")],1),e._v(" ，对特定的需求会方便一些。")]),e._v(" "),t("h4",{attrs:{id:"echo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#echo","aria-hidden":"true"}},[e._v("#")]),e._v(" Echo")]),e._v(" "),t("p",[e._v("Echo 的文档中，默认使用了 "),t("a",{attrs:{href:"https://github.com/gorilla/sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("gorilla/sessions"),t("OutboundLink")],1),e._v(" 这个中间件，也是同时支持 Server / Client Side Session ，可以扩展支持"),t("a",{attrs:{href:"https://github.com/gorilla/sessions#store-implementations",target:"_blank",rel:"noopener noreferrer"}},[e._v("其它存储后端"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("这个中间件也默认支持在一个浏览器会话中，维护"),t("a",{attrs:{href:"https://www.gorillatoolkit.org/pkg/sessions#NewSession",target:"_blank",rel:"noopener noreferrer"}},[e._v("多个 Session 多个 Session"),t("OutboundLink")],1),e._v(" ，对特定的需求会方便一些。")]),e._v(" "),t("h4",{attrs:{id:"beego"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beego","aria-hidden":"true"}},[e._v("#")]),e._v(" Beego")]),e._v(" "),t("p",[e._v("按照 Beego 的"),t("a",{attrs:{href:"https://beego.me/docs/mvc/controller/session.md?lang=en-US",target:"_blank",rel:"noopener noreferrer"}},[e._v("英文文档"),t("OutboundLink")],1),e._v("来看，默认只支持 Server Side Session，但是奇怪的是"),t("a",{attrs:{href:"https://beego.me/docs/mvc/controller/session.md?lang=zh-CN",target:"_blank",rel:"noopener noreferrer"}},[e._v("中文文档"),t("OutboundLink")],1),e._v("上却又写着"),t("em",[e._v("支持的后端引擎包括 Cookie")]),e._v(" ，可能是文档写错了。")]),e._v(" "),t("h3",{attrs:{id:"ruby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ruby","aria-hidden":"true"}},[e._v("#")]),e._v(" Ruby")]),e._v(" "),t("h4",{attrs:{id:"rails"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rails","aria-hidden":"true"}},[e._v("#")]),e._v(" Rails")]),e._v(" "),t("p",[e._v("Rails "),t("a",{attrs:{href:"https://guides.rubyonrails.org/action_controller_overview.html#session",target:"_blank",rel:"noopener noreferrer"}},[e._v("默认使用"),t("OutboundLink")],1),e._v(" Client Side Session 实现，Session-Data 『加密』并『签名』后存储在客户端浏览器的 Cookies 中。也支持配置为 Server Side Session 实现，可以使用多种后端存储。")]),e._v(" "),t("p",[e._v("在其它许多框架的 Session 实现中，都可以看到一个叫做 "),t("a",{attrs:{href:"https://guides.rubyonrails.org/action_controller_overview.html#the-flash",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flash"),t("OutboundLink")],1),e._v(" 的特殊数据，用于实现轻量的通知反馈等，这个功能应该是 Rails 首创的。")]),e._v(" "),t("p",[e._v("另外，Rails "),t("a",{attrs:{href:"https://guides.rubyonrails.org/security.html#sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("关于 Session 安全的文档"),t("OutboundLink")],1),e._v("写的非常非常细致，强烈建议阅读。")]),e._v(" "),t("h2",{attrs:{id:"session-机制的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-机制的使用","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 机制的使用")]),e._v(" "),t("h3",{attrs:{id:"不同实现方式的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同实现方式的对比","aria-hidden":"true"}},[e._v("#")]),e._v(" 不同实现方式的对比")]),e._v(" "),t("h4",{attrs:{id:"session-data-存储在何处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-data-存储在何处","aria-hidden":"true"}},[e._v("#")]),e._v(" Session-Data 存储在何处")]),e._v(" "),t("h5",{attrs:{id:"sever-side-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sever-side-session","aria-hidden":"true"}},[e._v("#")]),e._v(" Sever Side Session")]),e._v(" "),t("p",[e._v("Sever Side Session 是目前最常见的 Session 实现，以至于不少人会误以为它是唯一一种 Session 实现。")]),e._v(" "),t("p",[e._v("优点：")]),e._v(" "),t("ul",[t("li",[e._v("数据存储在服务端，相对来说安全性更强")]),e._v(" "),t("li",[e._v("请求时只需要传递 Session-ID，减小流量开销")]),e._v(" "),t("li",[e._v("可以方便的吊销 Session，管控 Session 策略")])]),e._v(" "),t("p",[e._v("劣势：")]),e._v(" "),t("ul",[t("li",[e._v("Session-Data 集中管理，不利于并行化，需要专门解决 Session 共享问题")]),e._v(" "),t("li",[e._v("Session-Data 需要占用服务端内存 / 存储，对服务端存在压力")])]),e._v(" "),t("h5",{attrs:{id:"client-side-session-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-side-session-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Client Side Session")]),e._v(" "),t("p",[e._v("Client Side Session 相对小众一些，但也可以看到许多框架都保留了对它的支持，Rails 甚至在文档中专门"),t("a",{attrs:{href:"https://guides.rubyonrails.org/security.html#session-storage",target:"_blank",rel:"noopener noreferrer"}},[e._v("写了一大段"),t("OutboundLink")],1),e._v("来描述为什么自己默认这么用。")]),e._v(" "),t("p",[e._v("优点：")]),e._v(" "),t("ul",[t("li",[e._v("实现简单，无须过多考虑 Session 存储、查询")]),e._v(" "),t("li",[e._v("将存储压力转移到了客户端，这样可以减小服务端的资源消耗")]),e._v(" "),t("li",[e._v("多机并行时，不需要考虑 Session 共享问题，完美支持高并发")])]),e._v(" "),t("p",[e._v("劣势：")]),e._v(" "),t("ul",[t("li",[e._v("Cookies 默认有 4KB 限制，不能存储太多内容")]),e._v(" "),t("li",[e._v("Cookies 会在每次请求时被默认携带，存储较多内容时，增大了流量消耗")]),e._v(" "),t("li",[e._v("存在重放攻击的风险，客户端可能会将数据替换为合法的旧数据")]),e._v(" "),t("li",[e._v("实现 Session 数据拉黑、强制失效等功能时比较复杂")]),e._v(" "),t("li",[e._v("数据需要『签名』或『加密』后才能确保安全，这需要开发者正确配置")]),e._v(" "),t("li",[e._v("部分实现只对数据进行了『签名』，客户端可以直接查看到数据内容，存在安全风险")])]),e._v(" "),t("h4",{attrs:{id:"session-id-如何进行传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-id-如何进行传递","aria-hidden":"true"}},[e._v("#")]),e._v(" Session-ID 如何进行传递")]),e._v(" "),t("p",[e._v("对于 Server Side Session 来说，绝大部分实现都会选择将 Session-ID 放在 Cookies 中，在发起请求时自动带上，这样也是很符合直觉的做法，但是凡事都有例外，还是有一些特殊的实现。")]),e._v(" "),t("h5",{attrs:{id:"重写进-url-中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写进-url-中","aria-hidden":"true"}},[e._v("#")]),e._v(" 重写进 URL 中")]),e._v(" "),t("p",[e._v("例如，PHP 默认就支持抛开 Cookies，"),t("a",{attrs:{href:"https://www.php.net/manual/zh/session.idpassing.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 URL 传递 Session-ID"),t("OutboundLink")],1),e._v("，相关的配置为 "),t("code",[e._v("use_cookies")]),e._v(" 、 "),t("code",[e._v("use_only_cookies")]),e._v(" 字段。")]),e._v(" "),t("p",[e._v("在 Tomcat 6.0 中，也支持类似的功能，但似乎是通过当前会话是否存在 Cookies 来判断的，也可以通过配置 "),t("a",{attrs:{href:"http://tomcat.apache.org/tomcat-6.0-doc/config/context.html#Common_Attributes",target:"_blank",rel:"noopener noreferrer"}},[e._v("disableURLRewriting"),t("OutboundLink")],1),e._v(" 来关闭。")]),e._v(" "),t("p",[e._v("当然也存在不同的声音，比如 Django 就明确拒绝这么做，为此还"),t("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/topics/http/sessions/#session-ids-in-urls",target:"_blank",rel:"noopener noreferrer"}},[e._v("在文档中专门写了原因"),t("OutboundLink")],1),e._v(" ，其一是 "),t("strong",[e._v("*make URLs ugly*")]),e._v(" ，其二是不安全。")]),e._v(" "),t("p",[e._v("除此之外，在 WAP 时代，由于早期手机浏览器很多不支持 Cookie，这种行为也非常常见。")]),e._v(" "),t("p",[e._v("必须要说的是，这样确实"),t("strong",[e._v("很不安全")]),e._v("，比如可以参考这篇 9 年前的文章："),t("a",{attrs:{href:"https://www.inbreak.net/archives/171",target:"_blank",rel:"noopener noreferrer"}},[e._v("浅谈 WAP 网站安全 - 空虚浪子心"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h5",{attrs:{id:"放进-header-中的其它字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#放进-header-中的其它字段","aria-hidden":"true"}},[e._v("#")]),e._v(" 放进 Header 中的其它字段")]),e._v(" "),t("p",[e._v("其实前面在说到 Spring 的时候就有提到，它"),t("a",{attrs:{href:"https://docs.spring.io/spring-session/docs/2.2.2.RELEASE/reference/html5/#httpsession-rest",target:"_blank",rel:"noopener noreferrer"}},[e._v("支持"),t("OutboundLink")],1),e._v("将 Session-ID 放进 Header 中的"),t("code",[e._v("X-Auth-Token")]),e._v(" 字段中。")]),e._v(" "),t("p",[e._v("实际上，只要前后端协调一致，其实放在任何一个字段都是没问题的。")]),e._v(" "),t("h5",{attrs:{id:"放进隐藏的表单字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#放进隐藏的表单字段","aria-hidden":"true"}},[e._v("#")]),e._v(" 放进隐藏的表单字段")]),e._v(" "),t("p",[e._v("这种处理方式我只在资料中看到过，大意就是在输出页面时，为每一个 Form 都补一个隐藏的 Session-ID 字段。")]),e._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("form")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("anyform"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("action")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("/xxx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("input")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("hidden"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("jsessionid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("value")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("ByOK2vjFD43aPnrF6C2HmdnV6QZcEbzWoWiBYEnLerjQ22zWpBng!-1582381342"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("input")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("text"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("form")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),t("p",[e._v("这种方式存在非常多的弊端，也难怪现在基本上看不到了。")]),e._v(" "),t("h4",{attrs:{id:"session-data-的安全如何保障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-data-的安全如何保障","aria-hidden":"true"}},[e._v("#")]),e._v(" Session-Data 的安全如何保障")]),e._v(" "),t("p",[e._v("对于 Client Side Session 来说，因为不需要索引，只需要看好 Session-Data 就好，在这件事上，大家也有不一样的思路。")]),e._v(" "),t("p",[e._v("大部分实现都选择只对 Session-Data 做『签名』处理，这样就算客户端知道 Session-Data 内部的数据是什么，也无法简单的篡改。")]),e._v(" "),t("p",[e._v("但是并不是所有的开发者都会注意这些，保不齐会有人存敏感信息在里面，所以部分框架不但做了签名，还做了『加密』，看也不让看。")]),e._v(" "),t("p",[e._v("需要注意的是，这样仍然存在重放攻击的风险，用户可以将其替换为旧的合法 Session-Data，此时服务端是无法鉴别出差异的。")]),e._v(" "),t("p",[e._v("另外，Rails "),t("a",{attrs:{href:"https://guides.rubyonrails.org/security.html#sessions",target:"_blank",rel:"noopener noreferrer"}},[e._v("关于 Session 安全的文档"),t("OutboundLink")],1),e._v("写的非常非常细致，再次强烈建议阅读。")]),e._v(" "),t("h3",{attrs:{id:"session-相关的误解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-相关的误解","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 相关的误解")]),e._v(" "),t("p",[e._v("Session 的概念并不复杂，洋洋洒洒写了这么多，其实还是因为讨论时遇到的各种误解，这里我们复盘一下。")]),e._v(" "),t("h4",{attrs:{id:"session-id-就是-session-嘛？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-id-就是-session-嘛？","aria-hidden":"true"}},[e._v("#")]),e._v(" Session ID 就是 Session 嘛？")]),e._v(" "),t("p",[e._v("不能等同，Session-ID 只是 Server Side Session 实现中，常用的索引信息。")]),e._v(" "),t("h4",{attrs:{id:"cookies-就是-session-嘛？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookies-就是-session-嘛？","aria-hidden":"true"}},[e._v("#")]),e._v(" Cookies 就是 Session 嘛？")]),e._v(" "),t("p",[e._v("Cookies 经常用于承载 Session 的信息（ID 或 Data），但并不是必然情况。")]),e._v(" "),t("h4",{attrs:{id:"session-是不是认证方式？session-和-token-的关系是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-是不是认证方式？session-和-token-的关系是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 是不是认证方式？Session 和 Token 的关系是什么？")]),e._v(" "),t("p",[e._v("这是经常被误解的一点，在此说下我个人的理解。")]),e._v(" "),t("p",[e._v("Token 并不是一个以技术手段定义的词汇，它的定义来源于『用途』。")]),e._v(" "),t("p",[e._v("但凡用于认证鉴权的 凭据，我认为都可以称作 Token ，与这个凭据的生成方式无关。")]),e._v(" "),t("p",[e._v("基于此，如果 Session-ID 或 Session-Data 被用作认证，那么我认为这条数据就可以被称为 Token。")]),e._v(" "),t("p",[e._v("但是需要注意，Session 自身是个虚拟概念，与 Token 毫不相关。")]),e._v(" "),t("h4",{attrs:{id:"session-和-jwt-的关系是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-和-jwt-的关系是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" Session 和 JWT 的关系是什么？")]),e._v(" "),t("p",[e._v("但凡提到 Session，就不可避免的会有人搬出 JWT ，也会有很多人把 Session 和 JWT 摆到对立面来讨论，但是这两个压根就不在一个维度。")]),e._v(" "),t("p",[e._v("先来看看 JWT 到底是什么，它的全名是 "),t("a",{attrs:{href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON Web Token"),t("OutboundLink")],1),e._v(" ，从名字就可以看出，它是特定的一种 Token 生成方式。")]),e._v(" "),t("p",[e._v("JWT 的生成方式大致是这样：将数据按特定格式进行序列化，标记过期时间，对数据进行『签名』后编码为 URL Safe 的 Base64URL 。")]),e._v(" "),t("p",[e._v("诶？好像有点眼熟？这怎么和 Client Side Session 那边对 Session-Data 的处理那么像呢？")]),e._v(" "),t("p",[e._v("除此之外，这里有一篇蛮有名的文章："),t("a",{attrs:{href:"http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stop using JWT for sessions"),t("OutboundLink")],1),e._v(" 也可以一起看看。")]),e._v(" "),t("p",[e._v("看完文章会发现，作者提到的那些将 JWT 用做 Session 实现的人，实际上说的都是 "),t("strong",[e._v("Client Side Session")]),e._v(" 啊。")]),e._v(" "),t("p",[e._v("那么问题变的比较清晰了：")]),e._v(" "),t("ul",[t("li",[e._v("JWT 只是一种处理数据的手法，它通过签名保证了信息的不可篡改，特定的格式也具备其它一些小特性。")]),e._v(" "),t("li",[e._v("JWT 的特性，让它具备成为 Client Side Session 的数据处理方式的潜力，也确实有人这么做了。")])]),e._v(" "),t("p",[e._v("而那些关于 JWT 与 Session 优劣的争论，实际上大部分都是在争论 Sever Side Session 和 Client Side Session 的优劣。")]),e._v(" "),t("h2",{attrs:{id:"总结复盘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结复盘","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结复盘")]),e._v(" "),t("p",[e._v("扯了冗长的上万字，其实就是为了说明一个『定义』的问题，Session 本身并不复杂，只要不把各种简称搞混。")]),e._v(" "),t("p",[e._v("很多时候由于大量使用简称，或者模糊定义，导致我们对概念本身失去了掌握，也经常让讨论变的低效。")]),e._v(" "),t("p",[e._v("另一方面，不能把自己所熟悉的那些实现当作全部，时不时的看看其它语言或框架，也许能发现许多好玩儿的东西。")]),e._v(" "),t("p",[e._v("最后，如果本文有哪些地方出现了疏漏或错误，还请不吝赐教，一起交流进步。")])])},[],!1,null,null,null);s.default=a.exports}}]);