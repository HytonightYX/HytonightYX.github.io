(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{212:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),s("h2",{attrs:{id:"状态码有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态码有哪些？","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态码有哪些？")]),t._v(" "),s("p",[t._v("RFC 规定 HTTP 的状态码为"),s("strong",[t._v("三位数")]),t._v("，被分为五类:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1xx")]),t._v(": 表示目前是协议处理的中间状态，还需要后续操作。")]),t._v(" "),s("li",[s("strong",[t._v("2xx")]),t._v(": 表示成功状态。")]),t._v(" "),s("li",[s("strong",[t._v("3xx")]),t._v(": 重定向状态，资源位置发生变动，需要重新请求。")]),t._v(" "),s("li",[s("strong",[t._v("4xx")]),t._v(": 请求报文有误。")]),t._v(" "),s("li",[s("strong",[t._v("5xx")]),t._v(": 服务器端发生错误。")])]),t._v(" "),s("h3",{attrs:{id:"_1xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1xx","aria-hidden":"true"}},[t._v("#")]),t._v(" 1xx")]),t._v(" "),s("p",[s("strong",[t._v("100 Continue")]),t._v(" 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息\n"),s("strong",[t._v("101 Switching Protocols")]),t._v("。在"),s("code",[t._v("HTTP")]),t._v("升级为"),s("code",[t._v("WebSocket")]),t._v("的时候，如果服务器同意变更，就会发送状态码 101。")]),t._v(" "),s("h3",{attrs:{id:"_2xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2xx","aria-hidden":"true"}},[t._v("#")]),t._v(" 2xx")]),t._v(" "),s("p",[s("strong",[t._v("200 OK")]),t._v("是见得最多的成功状态码。通常在响应体中放有数据。")]),t._v(" "),s("p",[s("strong",[t._v("204 No Content")]),t._v("含义与 200 相同，但响应头后没有 body 数据。")]),t._v(" "),s("p",[s("strong",[t._v("206 Partial Content")]),t._v("顾名思义，表示部分内容，它的使用场景为 HTTP 分块下载和断电续传，当然也会带上相应的响应头字段"),s("code",[t._v("Content-Range")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3xx","aria-hidden":"true"}},[t._v("#")]),t._v(" 3xx")]),t._v(" "),s("p",[s("strong",[t._v("301 Moved Permanently")]),t._v("即永久重定向，对应着"),s("strong",[t._v("302 Found")]),t._v("，即临时重定向。")]),t._v(" "),s("p",[t._v("比如你的网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回"),s("code",[t._v("301")]),t._v("，这个时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。")]),t._v(" "),s("p",[t._v("而如果只是暂时不可用，那么直接返回"),s("code",[t._v("302")]),t._v("即可，和"),s("code",[t._v("301")]),t._v("不同的是，浏览器并不会做缓存优化。")]),t._v(" "),s("p",[s("strong",[t._v("304 Not Modified")]),t._v(": 当协商缓存命中时会返回这个状态码。详见"),s("a",{attrs:{href:"http://47.98.159.95/my_blog/perform/001.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"_4xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4xx","aria-hidden":"true"}},[t._v("#")]),t._v(" 4xx")]),t._v(" "),s("p",[s("strong",[t._v("400 Bad Request")]),t._v(": 开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了。")]),t._v(" "),s("p",[s("strong",[t._v("403 Forbidden")]),t._v(": 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感。")]),t._v(" "),s("p",[s("strong",[t._v("404 Not Found")]),t._v(": 资源未找到，表示没在服务器上找到相应的资源。")]),t._v(" "),s("p",[s("strong",[t._v("405 Method Not Allowed")]),t._v(": 请求方法不被服务器端允许。")]),t._v(" "),s("p",[s("strong",[t._v("406 Not Acceptable")]),t._v(": 资源无法满足客户端的条件。")]),t._v(" "),s("p",[s("strong",[t._v("408 Request Timeout")]),t._v(": 服务器等待了太长时间。")]),t._v(" "),s("p",[s("strong",[t._v("409 Conflict")]),t._v(": 多个请求发生了冲突。")]),t._v(" "),s("p",[s("strong",[t._v("413 Request Entity Too Large")]),t._v(": 请求体的数据过大。")]),t._v(" "),s("p",[s("strong",[t._v("414 Request-URI Too Long")]),t._v(": 请求行里的 URI 太大。")]),t._v(" "),s("p",[s("strong",[t._v("429 Too Many Request")]),t._v(": 客户端发送的请求过多。")]),t._v(" "),s("p",[s("strong",[t._v("431 Request Header Fields Too Large")]),t._v("请求头的字段内容太大。")]),t._v(" "),s("h3",{attrs:{id:"_5xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5xx","aria-hidden":"true"}},[t._v("#")]),t._v(" 5xx")]),t._v(" "),s("p",[s("strong",[t._v("500 Internal Server Error")]),t._v(": 仅仅告诉你服务器出错了，出了啥错咱也不知道。")]),t._v(" "),s("p",[s("strong",[t._v("501 Not Implemented")]),t._v(": 表示客户端请求的功能还不支持。")]),t._v(" "),s("p",[s("strong",[t._v("502 Bad Gateway")]),t._v(": 服务器自身是正常的，但访问的时候出错了，啥错误咱也不知道。")]),t._v(" "),s("p",[s("strong",[t._v("503 Service Unavailable")]),t._v(": 表示服务器当前很忙，暂时无法响应服务。")]),t._v(" "),s("h2",{attrs:{id:"cors-库源码的原理是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors-库源码的原理是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" CORS 库源码的原理是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("http\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Origin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Headers'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Custom-Header'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Methods'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PUT, DELETE'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Max-Age'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3011'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"简单请求和非简单请求是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单请求和非简单请求是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单请求和非简单请求是什么？")]),t._v(" "),s("p",[t._v("只要同时满足以下两大条件，就属于简单请求")]),t._v(" "),s("ol",[s("li",[t._v("请求方法是以下三种方法之一")])]),t._v(" "),s("ul",[s("li",[t._v("HEAD")]),t._v(" "),s("li",[t._v("GET")]),t._v(" "),s("li",[t._v("POST")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("HTTP 的头信息 Request Headers 不超出以下几种字段")])]),t._v(" "),s("ul",[s("li",[t._v("Accept")]),t._v(" "),s("li",[t._v("Accept-Language")]),t._v(" "),s("li",[t._v("Content-Language")]),t._v(" "),s("li",[t._v("Last-Event-ID")]),t._v(" "),s("li",[t._v("Content-Type 只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t._v(" "),s("p",[t._v("凡是不同时满足上面两个条件，就属于非简单请求。")]),t._v(" "),s("p",[t._v("浏览器对这两种请求的处理，是不一样的。")]),t._v(" "),s("h2",{attrs:{id:"vary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vary","aria-hidden":"true"}},[t._v("#")]),t._v(" Vary")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Vary")])]),t._v(" 是一个 HTTP 响应头部")]),t._v(" "),s("h2",{attrs:{id:"http-头字段？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-头字段？","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP 头字段？")]),t._v(" "),s("p",[t._v("Content-Type")]),t._v(" "),s("h2",{attrs:{id:"_304缓存，有了last-modified，为什么还要用etag？有了etag，为什么还要用last-modified？etag一般怎么生成？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_304缓存，有了last-modified，为什么还要用etag？有了etag，为什么还要用last-modified？etag一般怎么生成？","aria-hidden":"true"}},[t._v("#")]),t._v(" 304缓存，有了Last-Modified，为什么还要用ETag？有了Etag，为什么还要用Last-Modified？Etag一般怎么生成？")]),t._v(" "),s("p",[s("strong",[t._v("有了Last-Modified，为什么还要用ETag？")]),t._v("\n（1）因为如果在一秒钟之内对一个文件进行两次更改，Last-Modified就会不正确。\n（2）某些服务器不能精确的得到文件的最后修改时间。\n（3）一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET。")]),t._v(" "),s("p",[s("strong",[t._v("有了Etag，为什么还要用Last-Modified？")]),t._v("\n因为有些时候 ETag 可以弥补 Last-Modified 判断的缺陷，但是也有时候 Last-Modified 可以弥补 ETag 判断的缺陷，比如一些图片等静态文件的修改，如果每次扫描内容生成 ETag 来比较，显然要比直接比较修改时间慢很多。所有说这两种判断是相辅相成的。")]),t._v(" "),s("p",[t._v("ETag的值服务端是对文件的索引节，大小和最后修改时间进行Hash后得到的。")]),t._v(" "),s("h2",{attrs:{id:"http2-0的优势？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0的优势？","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP2.0的优势？")]),t._v(" "),s("p",[t._v("（1）采用二进制格式传输数据，而非 http1.1 的文本格式，二进制格式在协议的解析和优化扩展上带来更多的优势和可能\n（2）对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量，而 http1.1 每次请求，都会携带大量冗余头信息，浪费了很多带宽资源，头压缩能够很好的解决该问题\n（3）多路复用，就是多个请求都是通过一个 TCP 连接并发完成，http1.1 虽然通过pipeline也能并发请求，但是多个请求之间的响应会被阻塞的，所以 pipeline 至今也没有被普及应用，而 http2.0做到了真正的并发请求，同时，流还支持优先级和流量控制\n（4）Server Push，服务端能够更快的把资源推送给客户端，例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML再发送这些请求，当客户端需要的时候，它已经在客户端了。")])])},[],!1,null,null,null);a.default=e.exports}}]);